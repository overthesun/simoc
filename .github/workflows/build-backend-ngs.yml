name: Publish to NGS

on:
  #push:
    #branches: [ master ]
  #pull_request:
    #branches: [ master ]
  #repository_dispatch:
    #types: [frontend-update-prod]
  # disable automatic push to ngs,
  # but leave the manual trigger
  workflow_dispatch:
    inputs:
      fe_branch:
        description: 'Use this frontend branch:'
        required: true
        default: 'master'
      be_branch:
        description: 'Use this backend branch:'
        required: true
        default: 'master'
      # This could be used to merge the two yml
      # files and conditionally push to beta/ngs
      # depending on the selected value
      #publish_to:
        #description: 'Push to this server:'
        #required: true

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER:  ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DB_PASSWORD: ${{ secrets.BETA_DB_PASSWORD }}
  FLASK_SECRET: ${{ secrets.BETA_FLASK_SECRET }}
  REDIS_PASSWORD: ${{ secrets.BETA_REDIS_PASSWORD }}
  K8S_CONFIG: simoc_k8s_ngs.env
  USE_GKE_GCLOUD_AUTH_PLUGIN: true


jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      # workaround to prevent node/vite crashes during the build step
      # see https://github.com/vitejs/vite/issues/2433#issuecomment-831399876
      # assume 4GB - 512MB
      NODE_OPTIONS: '--max-old-space-size=3584'
    steps:
      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.be_branch }}
          path: simoc
      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          repository: overthesun/simoc-web
          ref: ${{ github.event.inputs.fe_branch }}
          token: ${{ secrets.ACCESS_TOKEN }}
          path: simoc-web
      - id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_JSON }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
      - name: Use gcloud CLI
        run: gcloud info
      - name: Set up Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          check-latest: true
      - name: Download preset simdata
        working-directory: simoc-web/public
        run: |
          mkdir simdata
          cd simdata
          wget -r -nH --cut-dirs=2 --no-parent --accept="*.gz" -erobots=off -q https://simoc.space/download/simdata/
          ls -ld $PWD/*
      - name: Download skybox
        working-directory: simoc-web/src/assets
        run: |
          mkdir skybox
          cd skybox
          wget -r -nH --cut-dirs=2 --no-parent --accept="*.jpg" -erobots=off -q https://simoc.space/download/skybox/
          ls -ld $PWD/*
      - name: Download models
        working-directory: simoc-web/src/assets
        run: |
          mkdir models
          cd models
          wget -r -nH --cut-dirs=2 --no-parent --accept="*.glb" -erobots=off -q https://simoc.space/download/models/
          ls -ld $PWD/*
      - name: npm install
        working-directory: simoc-web
        run: |
          npm install --no-fund --no-audit -g npm@latest
          npm install --no-fund
      - name: Print info
        run: |
          echo "Current branch: $GITHUB_HEAD_REF"
          echo "node $(node --version); npm $(npm --version)"
      - name: Build
        working-directory: simoc-web
        run: |
          npm run build
          ls -ld $PWD/dist/*
      - name: Create Backend Artifacts
        run: |-
          rm -rf simoc/simoc_server/dist
          cp -r simoc-web/dist simoc/simoc_server/
          tar -cvf simoc_bundle.tar simoc/
      - name: Save Backend Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: simoc-bundle
          path: simoc_bundle.tar
      - name: Build Flask Image
        working-directory: simoc
        run: docker build -t simoc_flask .
      - name: Build Celery Image
        working-directory: simoc
        run: docker build -f Dockerfile-celery-worker -t simoc_celery .
      - name: Tags Images
        run: |-
          docker tag simoc_flask gcr.io/$PROJECT_ID/simoc_flask:${{ github.sha }}
          docker tag simoc_celery gcr.io/$PROJECT_ID/simoc_celery:${{ github.sha }}
          docker tag simoc_flask gcr.io/$PROJECT_ID/simoc_flask:latest
          docker tag simoc_celery gcr.io/$PROJECT_ID/simoc_celery:latest
      - name: Configure Docker for GCP
        run: gcloud --quiet auth configure-docker
      - name: Publish Images to GCP
        run: |-
          docker push gcr.io/$PROJECT_ID/simoc_flask:${{ github.sha }}
          docker push gcr.io/$PROJECT_ID/simoc_celery:${{ github.sha }}
          docker push gcr.io/$PROJECT_ID/simoc_flask:latest
          docker push gcr.io/$PROJECT_ID/simoc_celery:latest

  cd-gcp:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Checkout Backend Repository
        uses: actions/checkout@v4
      - name: Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_JSON }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          install_components: "gke-gcloud-auth-plugin"
      - name: Use gcloud CLI
        run: gcloud info
      - name: Configure GKE
        run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      - name: Create Kubernetes Configs
        run: |-
          source $K8S_CONFIG && export VERSION=${{ github.sha }}
          python3 -m pip install -U jinja2
          python3 generate_k8s_configs.py
      - name: Deploy to Kubernetes Cluster
        run: |-
          kubectl apply -f k8s/deployments/redis_environment.yaml
          kubectl apply -f k8s/deployments/simoc_db_environment.yaml
          kubectl apply -f k8s/deployments/simoc_flask_server.yaml
          kubectl apply -f k8s/deployments/simoc_celery_cluster.yaml
          kubectl apply -f k8s/autoscalers/simoc_flask_autoscaler.yaml
          kubectl apply -f k8s/autoscalers/simoc_celery_autoscaler.yaml
          kubectl apply -f k8s/services/simoc_flask_service.yaml
          kubectl rollout restart deployment/simoc-flask-server
          kubectl rollout restart deployment/simoc-celery-cluster
